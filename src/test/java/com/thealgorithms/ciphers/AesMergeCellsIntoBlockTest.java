
// ********RoostGPT********
/*
Test generated by RoostGPT for test Java-test-1 using AI Type  and AI Model

ROOST_METHOD_HASH=mergeCellsIntoBlock_86e607ac4a
ROOST_METHOD_SIG_HASH=mergeCellsIntoBlock_d2c985711d

"""
Scenario 1: Testing mergeCellsIntoBlock method with an array of 8-bit integers to ensure proper conversion to the BigInteger representation

  Details:
    TestName: testMergeCellsIntoBlockWithValidData
    Description: This test checks the method for proper conversion of an array of 8-bit integers into the BigInteger representation. The array size is 16.
  Execution:
    Arrange: Create a valid input array with 16 8-bit integers.
    Act: Call the `mergeCellsIntoBlock(inputArray)` method on the AES object.
    Assert: Check if the output BigInteger value matches the expected BigInteger value.
  Validation:
    This test ensures that the method correctly forms a 128-bit BigInteger value from an array of 8-bit integers. The expected value is predefined based on the known conversion of the given array.

Scenario 2: Testing mergeCellsIntoBlock with an array of integers that exceeds 8-bit to verify method robustness

  Details:
    TestName: testMergeCellsIntoBlockWithInvalidData
    Description: This test ensures that the method handles cases where the values of the integer array exceed 8-bit. The test verifies that the method doesn't throw an exception during execution.
  Execution:
    Arrange: Create an input array with integers out of the 8-bit range.
    Act: Call the `mergeCellsIntoBlock(inputArray)` method on the AES object.
    Assert: Catch any exception generated, ensure that the exception message is equal to a predefined expected message.
  Validation:
    This test ensures that the method properly handles error condition when provided with an array that contains values exceeding the 8-bit range. The validation aims to verify proper error propagation.

Scenario 3: Testing mergeCellsIntoBlock method with an empty array

  Details:
    TestName: testMergeCellsIntoBlockWithEmptyArray
    Description: This test verifies the method behavior when called with an empty integer array. It checks how the method handles input of insufficient length.
  Execution:
    Arrange: Create an empty input array.
    Act: Call the `mergeCellsIntoBlock(inputArray)` method on the AES object.
    Assert: Check if an exception is thrown. Ensure that the exception message matches the expected message.
  Validation:
    This test is important to verify the robustness of the method in handling insufficient input length. The exception message should be clear indicating the specific error condition.
"""
*/

// ********RoostGPT********

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.Test;
import com.thealgorithms.ciphers.AES;
import java.math.BigInteger;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.*;
import java.util.Scanner;

public class AesMergeCellsIntoBlockTest {

	@Test
	@Tag("valid")
	public void testMergeCellsIntoBlockWithValidData() {
		int[] cells = { 15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165, 180, 195, 210, 225, 240 };
		BigInteger expectedOutput = new BigInteger("0F1E2D3C4B5A69788796A5B4C3D2E1F0", 16);
		BigInteger actualOutput = AES.mergeCellsIntoBlock(cells);
		assertEquals(expectedOutput, actualOutput, "Expected and actual outputs are not equal");
	}

	@Test
	@Tag("invalid")
	public void testMergeCellsIntoBlockWithInvalidData() {
		int[] cells = { 512, 1024 }; // Values exceeding 8 bits
		try {
			AES.mergeCellsIntoBlock(cells);
			fail("Expected an IllegalArgumentException to be thrown");
		}
		catch (IllegalArgumentException exception) {
			assertEquals("Array must contain exactly 16 elements", exception.getMessage());
		}
	}

	@Test
	@Tag("valid")
	public void testMergeCellsIntoBlockWithEmptyArray() {
		int[] cells = {};
		assertThrows(IllegalArgumentException.class, () -> AES.mergeCellsIntoBlock(cells),
				"Array must contain exactly 16 elements");
	}

}