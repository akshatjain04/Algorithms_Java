
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-algorithms using AI Type  and AI Model

ROOST_METHOD_HASH=surfaceAreaRectangle_2410f53623
ROOST_METHOD_SIG_HASH=surfaceAreaRectangle_f7258b0ef7

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/java-algorithms/504535cb-0e17-4e6a-8e5d-ca37b6e0367f/source/Algorithms_Java/src/test/java/com/thealgorithms/maths/AreaTest.java
Tests:
    "@Test
@Test
void testSurfaceAreaRectangle() {
    assertEquals(200.0, Area.surfaceAreaRectangle(10, 20));
}
"
    "@Test
@Test
void testAllIllegalInput() {
    assertAll(() -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCube(0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaSphere(0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaRectangle(0, 10)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaRectangle(10, 0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCylinder(0, 1)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCylinder(1, 0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaSquare(0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaTriangle(0, 1)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaTriangle(1, 0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaParallelogram(0, 1)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaParallelogram(1, 0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaTrapezium(0, 1, 1)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaTrapezium(1, 0, 1)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaTrapezium(1, 1, 0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCircle(0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaHemisphere(0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCone(1, 0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCone(0, 1)));
}
Scenario 1: Test when both length and width are positive

Details:
  TestName: testPositiveLengthAndWidth
  Description: This test is meant to check if the method correctly calculates the surface area when both length and width are positive.

Execution:
  Arrange: No arrangement is necessary for this test.
  Act: Invoke surfaceAreaRectangle with positive values for length and width.
  Assert: The returned value should be equal to the multiplication of length and width.

Validation:
  The assertion verifies that the method correctly calculates the surface area of a rectangle when both length and width are positive.
  The significance of this test is to ensure that the basic functionality of the method is working correctly.

Scenario 2: Test when length is negative and width is positive

Details:
  TestName: testNegativeLengthPositiveWidth
  Description: This test is meant to check if the method correctly throws an exception when the length is negative and width is positive.

Execution:
  Arrange: No arrangement is necessary for this test.
  Act: Invoke surfaceAreaRectangle with a negative value for length and a positive value for width.
  Assert: An IllegalArgumentException should be thrown.

Validation:
  The assertion verifies that the method correctly throws an exception when the length is negative.
  The significance of this test is to ensure that the method properly validates its input and handles error situations.

Scenario 3: Test when length is positive and width is negative

Details:
  TestName: testPositiveLengthNegativeWidth
  Description: This test is meant to check if the method correctly throws an exception when the length is positive and the width is negative.

Execution:
  Arrange: No arrangement is necessary for this test.
  Act: Invoke surfaceAreaRectangle with a positive value for length and a negative value for width.
  Assert: An IllegalArgumentException should be thrown.

Validation:
  The assertion verifies that the method correctly throws an exception when the width is negative.
  The significance of this test is to ensure that the method properly validates its input and handles error situations.

Scenario 4: Test when both length and width are zero

Details:
  TestName: testZeroLengthAndWidth
  Description: This test is meant to check if the method correctly throws an exception when both the length and width are zero.

Execution:
  Arrange: No arrangement is necessary for this test.
  Act: Invoke surfaceAreaRectangle with zero for both length and width.
  Assert: An IllegalArgumentException should be thrown.

Validation:
  The assertion verifies that the method correctly throws an exception when both length and width are zero.
  The significance of this test is to ensure that the method properly validates its input and handles error situations.

roost_feedback [11/13/2024, 8:58:52 AM]:add a comment at the top of the file as dummy comment
*/

// ********RoostGPT********

/*
Test generated by RoostGPT for test java-algorithms using AI Type  and AI Model

ROOST_METHOD_HASH=surfaceAreaRectangle_2410f53623
ROOST_METHOD_SIG_HASH=surfaceAreaRectangle_f7258b0ef7

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/java-algorithms/504535cb-0e17-4e6a-8e5d-ca37b6e0367f/source/Algorithms_Java/src/test/java/com/thealgorithms/maths/AreaTest.java
Tests:
    "@Test
@Test
void testSurfaceAreaRectangle() {
    assertEquals(200.0, Area.surfaceAreaRectangle(10, 20));
}
"
    "@Test
@Test
void testAllIllegalInput() {
    assertAll(() -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCube(0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaSphere(0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaRectangle(0, 10)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaRectangle(10, 0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCylinder(0, 1)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCylinder(1, 0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaSquare(0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaTriangle(0, 1)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaTriangle(1, 0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaParallelogram(0, 1)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaParallelogram(1, 0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaTrapezium(0, 1, 1)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaTrapezium(1, 0, 1)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaTrapezium(1, 1, 0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCircle(0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaHemisphere(0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCone(1, 0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCone(0, 1)));
}
""""
Scenario 1: Test when both length and width are positive

Details:
  TestName: testPositiveLengthAndWidth
  Description: This test is meant to check if the method correctly calculates the surface area when both length and width are positive.

Execution:
  Arrange: No arrangement is necessary for this test.
  Act: Invoke surfaceAreaRectangle with positive values for length and width.
  Assert: The returned value should be equal to the multiplication of length and width.

Validation:
  The assertion verifies that the method correctly calculates the surface area of a rectangle when both length and width are positive.
  The significance of this test is to ensure that the basic functionality of the method is working correctly.

Scenario 2: Test when length is negative and width is positive

Details:
  TestName: testNegativeLengthPositiveWidth
  Description: This test is meant to check if the method correctly throws an exception when the length is negative and width is positive.

Execution:
  Arrange: No arrangement is necessary for this test.
  Act: Invoke surfaceAreaRectangle with a negative value for length and a positive value for width.
  Assert: An IllegalArgumentException should be thrown.

Validation:
  The assertion verifies that the method correctly throws an exception when the length is negative.
  The significance of this test is to ensure that the method properly validates its input and handles error situations.

Scenario 3: Test when length is positive and width is negative

Details:
  TestName: testPositiveLengthNegativeWidth
  Description: This test is meant to check if the method correctly throws an exception when the length is positive and the width is negative.

Execution:
  Arrange: No arrangement is necessary for this test.
  Act: Invoke surfaceAreaRectangle with a positive value for length and a negative value for width.
  Assert: An IllegalArgumentException should be thrown.

Validation:
  The assertion verifies that the method correctly throws an exception when the width is negative.
  The significance of this test is to ensure that the method properly validates its input and handles error situations.

Scenario 4: Test when both length and width are zero

Details:
  TestName: testZeroLengthAndWidth
  Description: This test is meant to check if the method correctly throws an exception when both the length and width are zero.

Execution:
  Arrange: No arrangement is necessary for this test.
  Act: Invoke surfaceAreaRectangle with zero for both length and width.
  Assert: An IllegalArgumentException should be thrown.

Validation:
  The assertion verifies that the method correctly throws an exception when both length and width are zero.
  The significance of this test is to ensure that the method properly validates its input and handles error situations.
*/

package com.thealgorithms.maths;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.function.Executable;
import static org.junit.jupiter.api.Assertions.*;

public class AreaSurfaceAreaRectangleTest {

	@Test
	@Tag("valid")
	public void testPositiveLengthAndWidth() {
		double length = 5.0;
		double width = 3.0;
		double expected = 15.0;
		double actual = Area.surfaceAreaRectangle(length, width);
		assertEquals(expected, actual,
				"Surface area of rectangle with positive length and width is calculated incorrectly");
	}

	@Test
	@Tag("invalid")
	public void testNegativeLengthPositiveWidth() {
		double length = -5.0;
		double width = 3.0;
		Executable executable = () -> Area.surfaceAreaRectangle(length, width);
		assertThrows(IllegalArgumentException.class, executable,
				"Expected IllegalArgumentException for negative length");
	}

	@Test
	@Tag("invalid")
	public void testPositiveLengthNegativeWidth() {
		double length = 5.0;
		double width = -3.0;
		Executable executable = () -> Area.surfaceAreaRectangle(length, width);
		assertThrows(IllegalArgumentException.class, executable,
				"Expected IllegalArgumentException for negative width");
	}

	@Test
	@Tag("invalid")
	public void testZeroLengthAndWidth() {
		double length = 0.0;
		double width = 0.0;
		Executable executable = () -> Area.surfaceAreaRectangle(length, width);
		assertThrows(IllegalArgumentException.class, executable,
				"Expected IllegalArgumentException for zero length and width");
	}
}
