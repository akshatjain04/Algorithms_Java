// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview
ROOST_METHOD_HASH=of_eb8138c6bc
ROOST_METHOD_SIG_HASH=of_7a04d5363c
Scenario 1: Valid Job Creation
Details:
  TestName: createValidJob
  Description: This test ensures that a Job object is correctly instantiated with valid parameters.
Execution:
  Arrange: Define a jobName, processingTime, and deadline for the Job.
  Act: Call the of method with the provided parameters.
  Assert: Verify that the returned Job object has the expected name, processingTime, and deadline.
Validation:
  The assertion checks if the Job object's fields match the parameters passed to the of method. This test validates the core functionality of the of method, ensuring that it initializes Job objects correctly.
Scenario 2: Job Creation with Empty Name
Details:
  TestName: createJobWithEmptyName
  Description: This test verifies that the Job object handles an empty jobName string without errors.
Execution:
  Arrange: Provide an empty string for jobName, along with valid processingTime and deadline.
  Act: Call the of method with these parameters.
  Assert: Confirm that the Job object is created and has an empty name.
Validation:
  The assertion confirms that the Job object can handle an empty name field. This test is significant to verify that the application doesn't crash or behave unexpectedly when jobName is an empty string.
Scenario 3: Job Creation with Negative Processing Time
Details:
  TestName: createJobWithNegativeProcessingTime
  Description: This test checks the behavior of the of method when a negative processingTime is provided.
Execution:
  Arrange: Set a negative value for processingTime, with valid jobName and deadline.
  Act: Call the of method with these parameters.
  Assert: Verify that the Job object is not created or an appropriate exception is thrown.
Validation:
  The assertion ensures that negative processingTime values are handled correctly, either by preventing object creation or by throwing an exception. It is crucial for maintaining the integrity of the Job object's state.
Scenario 4: Job Creation with Negative Deadline
Details:
  TestName: createJobWithNegativeDeadline
  Description: This test assesses the of method's response to a negative deadline value.
Execution:
  Arrange: Set a negative value for deadline, with valid jobName and processingTime.
  Act: Call the of method with these parameters.
  Assert: Check that the Job object is not created or an appropriate exception is thrown.
Validation:
  The assertion tests the method's robustness in handling invalid deadline values. Ensuring correct behavior in such scenarios is important for the reliability of the scheduling logic that might depend on the deadline.
Scenario 5: Job Creation with Null Name
Details:
  TestName: createJobWithNullName
  Description: This test verifies that the of method handles a null jobName appropriately.
Execution:
  Arrange: Set the jobName to null and provide valid processingTime and deadline.
  Act: Call the of method with these parameters.
  Assert: Expect the Job object to either not be created or an exception to be thrown.
Validation:
  The assertion checks that the of method gracefully handles null values for jobName, which is essential for preventing NullPointerExceptions in the application.
Scenario 6: Job Creation with Extreme Processing Time
Details:
  TestName: createJobWithExtremeProcessingTime
  Description: This test checks how the of method handles extremely large processingTime values.
Execution:
  Arrange: Use an extremely large value for processingTime, with valid jobName and deadline.
  Act: Call the of method with these parameters.
  Assert: Confirm that the Job object is created and the processingTime is set as expected.
Validation:
  The assertion verifies that the of method can handle large integer values for processingTime without overflow issues. This is important for ensuring the application can deal with jobs with long processing times.
Scenario 7: Job Creation with Zero Deadline
Details:
  TestName: createJobWithZeroDeadline
  Description: This test ensures that the of method can create a Job object with a deadline of zero.
Execution:
  Arrange: Provide a valid jobName and processingTime with a deadline of zero.
  Act: Call the of method with these parameters.
  Assert: Check that the Job object is created with a deadline of zero.
Validation:
  The assertion verifies that the of method correctly handles a deadline of zero, which might represent a job without a specific deadline. It's important to confirm that such special cases are correctly managed by the application.
*/
// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.assertj.core.api.Assertions;
import java.util.Arrays;
import org.junit.jupiter.api.*;

@Tag("com.thealgorithms.greedyalgorithms")
@Tag("com.thealgorithms.greedyalgorithms.of")
public class MinimizingLatenessOfTest {

	@Test
	public void createValidJob() {
		// Arrange
		String jobName = "Job1";
		int processingTime = 10;
		int deadline = 20;

		// Act
		Job result = MinimizingLatenessOf.of(jobName, processingTime, deadline);

		// Assert
		assertNotNull(result);
		assertEquals(jobName, result.getJobName());
		assertEquals(processingTime, result.getProcessingTime());
		assertEquals(deadline, result.getDeadline());
	}

	@Test
	public void createJobWithEmptyName() {
		// Arrange
		String jobName = "";
		int processingTime = 10;
		int deadline = 20;

		// Act
		Job result = MinimizingLatenessOf.of(jobName, processingTime, deadline);

		// Assert
		assertNotNull(result);
		assertEquals(jobName, result.getJobName());
	}

	@Test
	public void createJobWithNegativeProcessingTime() {
		// Arrange
		String jobName = "Job2";
		int processingTime = -5;
		int deadline = 20;

		// Act & Assert
		Assertions.assertThatThrownBy(() -> MinimizingLatenessOf.of(jobName, processingTime, deadline))
			.isInstanceOf(IllegalArgumentException.class);
	}

	@Test
	public void createJobWithNegativeDeadline() {
		// Arrange
		String jobName = "Job3";
		int processingTime = 10;
		int deadline = -10;

		// Act & Assert
		Assertions.assertThatThrownBy(() -> MinimizingLatenessOf.of(jobName, processingTime, deadline))
			.isInstanceOf(IllegalArgumentException.class);
	}

	@Test
	public void createJobWithNullName() {
		// Arrange
		String jobName = null;
		int processingTime = 10;
		int deadline = 20;

		// Act & Assert
		Assertions.assertThatThrownBy(() -> MinimizingLatenessOf.of(jobName, processingTime, deadline))
			.isInstanceOf(NullPointerException.class);
	}

	@Test
	public void createJobWithExtremeProcessingTime() {
		// Arrange
		String jobName = "Job4";
		int processingTime = Integer.MAX_VALUE;
		int deadline = 20;

		// Act
		Job result = MinimizingLatenessOf.of(jobName, processingTime, deadline);

		// Assert
		assertNotNull(result);
		assertEquals(processingTime, result.getProcessingTime());
	}

	@Test
	public void createJobWithZeroDeadline() {
		// Arrange
		String jobName = "Job5";
		int processingTime = 10;
		int deadline = 0;

		// Act
		Job result = MinimizingLatenessOf.of(jobName, processingTime, deadline);

		// Assert
		assertNotNull(result);
		assertEquals(deadline, result.getDeadline());
	}

}