// This test file is marked invalid as it contains compilation errors. Change the extension to of this file to .java, to manually edit its contents


// ********RoostGPT********
/*
Test generated by RoostGPT for test Java-test-1 using AI Type  and AI Model 

ROOST_METHOD_HASH=exist_13fb87d8d8
ROOST_METHOD_SIG_HASH=exist_7bc1546c93

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/Java-test-1/4fe02726-06d9-4581-a823-6990ffcbda14/source/Algorithms_Java/src/test/java/com/thealgorithms/backtracking/WordSearchTest.java
Tests:
    "@Test
@Test
void test1() {
    WordSearch ws = new WordSearch();
    char[][] board = { { 'A', 'B', 'C', 'E' }, { 'S', 'F', 'C', 'S' }, { 'A', 'D', 'E', 'E' } };
    String word = "ABCCED";
    assertTrue(ws.exist(board, word));
}
"
    "@Test
@Test
void test2() {
    WordSearch ws = new WordSearch();
    char[][] board = { { 'A', 'B', 'C', 'E' }, { 'S', 'F', 'C', 'S' }, { 'A', 'D', 'E', 'E' } };
    String word = "SEE";
    assertTrue(ws.exist(board, word));
}
"
    "@Test
@Test
void test3() {
    WordSearch ws = new WordSearch();
    char[][] board = { { 'A', 'B', 'C', 'E' }, { 'S', 'F', 'C', 'S' }, { 'A', 'D', 'E', 'E' } };
    String word = "ABCB";
    Assertions.assertFalse(ws.exist(board, word));
}
""""
Scenario 1: Validate exist() function with empty board.

Details:  
TestName: testEmptyBoard.
Description: This test is meant to check the behavior of the exist() function when it is given an empty board. 
Execution:
Arrange: Create an instance of the WordSearch class and an empty board with no characters and any string word.
Act: Invoke the exist() method with the empty board and the word.
Assert: The return value should be false since there is no element in the board.
Validation: The empty board does not contain any character. Therefore, it is impossible to find any word, including the empty string. Hence, the expected result is false.

Scenario 2: Validate exist() function with null word.

Details:  
TestName: testNullWord.
Description: This test is meant to check the behavior of the exist() function when a null word is given for search.
Execution:
Arrange: Create an instance of the WordSearch class with a filled board and a null word.
Act: Invoke the exist() function with the filled board and null word.
Assert: There should be a null pointer exception since the function attempts to access the first character of the null word.
Validation: The test verifies that the function checks for null valued words and expected response is null pointer exception.

Scenario 3: Validate exist() function with empty word.

Details:  
TestName: testEmptyWord.
Description: This scenario tests the behavior of the exist() function when given an empty word for search.
Execution:
Arrange: Create an instance of the WordSearch class with filled board and an empty word.
Act: Invoke the exist() method with the filled board and the empty word.
Assert: The result should return true since an empty string should be part of any board.
Validation: According to the program logic, an empty string should be found in any board configuration, hence the return value should be true.

Scenario 4: Check Word longer than the board's elements.

Details:  
TestName: testWordLengthGreaterBoardElements.
Description: The test is meant to check the behavior of the exist() function when the word's length is greater than the total elements in the board.
Execution:
Arrange: Create an instance of the WordSearch class and a filled board with a word whose length is greater than the total elements in the board.
Act: Invoke the exist() function.
Assert: The return value should be false since it is impossible to find the word in the board.
Validation: If the length of the word is more than the total elements in the board, on basis of logical assumption, it is impossible to find such a word in the board and hence the return value is expected to be false.

Scenario 5: Validate exist() function where word is found in reverse order in the board.

Details:  
TestName: testWordInReverseOrder.
Description: This scenario tests the behavior of the exist() function where the word is found in reverse order in the board.
Execution:
Arrange: Create an instance of the WordSearch class and a filled board where the characters of the word are found in reverse order.
Act: Invoke the exist() method with the filled board and the word.
Assert: The result should be false since the word characters are not matched in their original sequence.
Validation: The exist() function checks for sequences of characters matching the word in their original order. Therefore, even if a word's characters appear in a board in reverse order, the function should return false.
*/

// ********RoostGPT********

package com.thealgorithms.backtracking;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtensionContext;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.ArgumentsProvider;
import org.junit.jupiter.params.provider.ArgumentsSource;
import java.util.stream.Stream;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

public class WordSearchExistTest {
    @ParameterizedTest
    @Tag('valid')
    @ArgumentsSource(TestScenarioProvider.class)
    public void testExist(char[][] board, String word, boolean expected) {
        WordSearch wordSearch = new WordSearch();
        
        assertThat(wordSearch.exist(board, word)).isEqualTo(expected);
    }
    @Test
    @Tag('invalid')
    public void testNullWord() {
        WordSearch wordSearch = new WordSearch();
        char[][] board = {{'A'}};
        assertThatThrownBy(() -> wordSearch.exist(board, null))
            .isInstanceOf(NullPointerException.class);
    }
   
    static class TestScenarioProvider implements ArgumentsProvider {
        @Override
        public Stream<? extends Arguments> provideArguments(ExtensionContext context) {
            return Stream.of(
                    Arguments.of(new char[][]{}, "", false),
                    Arguments.of(new char[][]{{'A'}}, "", true),
                    Arguments.of(new char[][]{{'A'}}, "A", true),
                    Arguments.of(new char[][]{{'A'}}, "B", false),
                    Arguments.of(new char[][]{{'A', 'B'}}, "AB", false),
                    Arguments.of(new char[][]{{'A', 'B'}, {'C', 'D'}}, "AB", true)
            );
        }
    }
}