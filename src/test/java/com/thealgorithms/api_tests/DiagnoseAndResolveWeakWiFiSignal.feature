# ********RoostGPT********

# Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview
# 
# ROOST_METHOD_HASH=75c9169c0c
# ROOST_METHOD_SIG_HASH=7a25c565c6
# 
#  ########## Scenario ########## 
# 
# {
#   feature: 'Feature: WiFi Troubleshooting for Fiber Internet Customers',
#   background: 'Background:\n' +
#     '    Given the customer support representative has access to the service activation and configuration API\n' +
#     '    And the customer support representative has access to the service test management API',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Diagnose and resolve weak WiFi signal',
#     steps: 'Given a customer with subscriber ID "SVTAL001" reports a weak WiFi signal\n' +
#       'When the support representative initiates a diagnostic test\n' +
#       'Then the service test API should return a test ID\n' +
#       'And the diagnostic result should indicate low WiFi signal strength\n' +
#       'When the support representative uses the configuration API to change the WiFi channel\n' +
#       'Then the configuration API should return a success response\n' +
#       'And the customer should report improved WiFi signal strength',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
Feature: WiFi Troubleshooting for Fiber Internet Customers

Background:
  * def SERVICEACTIVATIONANDCONFIGURATION_V1_C70DB0ED15_URL = karate.properties['SERVICEACTIVATIONANDCONFIGURATION_V1_C70DB0ED15_URL'] || karate.get('SERVICEACTIVATIONANDCONFIGURATION_V1_C70DB0ED15_URL', 'http://localhost:4010')
  * def SERVICEACTIVATIONANDCONFIGURATION_V1_C70DB0ED15_AUTH_TOKEN = karate.properties['SERVICEACTIVATIONANDCONFIGURATION_V1_C70DB0ED15_AUTH_TOKEN'] || karate.get('SERVICEACTIVATIONANDCONFIGURATION_V1_C70DB0ED15_AUTH_TOKEN', 'Bearer_Dummy_Token')

Scenario: Diagnose and resolve weak WiFi signal
  * url 'http://mocktestapi.com'
  And path '/initiateDiagnostic'
  And request { subscriberId: 'SVTAL001' }
  When method post
  Then status 200
  And def testId = response.testId
  And match response.results.signalStrength == 'low'
  
  * url SERVICEACTIVATIONANDCONFIGURATION_V1_C70DB0ED15_URL
  * header Authorization = SERVICEACTIVATIONANDCONFIGURATION_V1_C70DB0ED15_AUTH_TOKEN
  Given path '/configuration'
  And request """
    {
      "configuration": {
        "action": {
          "type": "HGW_WIFI_CONFIGURATION",
          "parameters": {
            "newChannel": "6"
          }
        },
        "customer": {
          "id": "SVTAL001"
        },
        "id": "config-123",
        "adminStatus": "1",
        "startDate": "2023-01-01T00:00:00Z",
        "endDate": "2023-01-02T00:00:00Z",
        "state": "pending"
      }
    }
  """
  When method post
  Then status 200
  And match response.control.type == 'S'
  And match response.configuration.configuration.action.type == 'HGW_WIFI_CONFIGURATION'
  And match response.configuration.configuration.adminStatus == '1'
  And match response.configuration.configuration.state == 'pending'
  
  * url 'http://mockcustomerfeedbackapi.com'
  And path '/reportSignalStrength'
  And request { subscriberId: 'SVTAL001', signalStrength: 'improved' }
  When method post
  Then status 200
  And match response.feedbackStatus == 'success'
