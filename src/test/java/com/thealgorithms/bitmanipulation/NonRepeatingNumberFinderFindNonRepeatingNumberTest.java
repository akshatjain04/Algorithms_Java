
// ********RoostGPT********
/*
Test generated by RoostGPT for test Java-test-1 using AI Type  and AI Model

ROOST_METHOD_HASH=findNonRepeatingNumber_8b3b5ba7c8
ROOST_METHOD_SIG_HASH=findNonRepeatingNumber_825a284e43

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/Java-test-1/4fe02726-06d9-4581-a823-6990ffcbda14/source/Algorithms_Java/src/test/java/com/thealgorithms/bitmanipulation/NonRepeatingNumberFinderTest.java
Tests:
    "@Test
@Test
void testNonRepeatingNumberFinder() {
    int[] arr = { 1, 2, 1, 2, 6 };
    assertEquals(6, NonRepeatingNumberFinder.findNonRepeatingNumber(arr));
    int[] arr1 = { 1, 2, 1, 2 };
    assertEquals(0, NonRepeatingNumberFinder.findNonRepeatingNumber(arr1));
    int[] arr2 = { 12 };
    assertEquals(12, NonRepeatingNumberFinder.findNonRepeatingNumber(arr2));
}
""""
Scenario 1: Test with all numbers repeating twice except one number
TestName: testNonRepeatingNumberInArrayWithDuplicates()
Description: The test will check array with all numbers repeating twice except one. It's designed to confirm if the method properly finds the non-repeating number in such array.
Execution:
    Arrange: Create an array with all numbers repeating twice except one.
    Act: Invoke findNonRepeatingNumber with the prepared array.
    Assert: Assert the result is the single non-repeating number.
Validation:
    The test verifies that the findNonRepeatingNumber method correctly identifies the only number that does not repeat twice in the array. This is relevant as this situation is a primary use case of the method.

Scenario 2: Test with all numbers repeating twice and no non-repeating number
TestName: testNonRepeatingNumberInArrayWithoutNonRepeatingNumber()
Description: The test will check array with all numbers repeating twice with no non-repeating number. The method should return zero in this case.
Execution:
    Arrange: Create an array with all numbers repeating twice.
    Act: Invoke findNonRepeatingNumber with the prepared array.
    Assert: Assert the result is zero.
Validation:
    The assertion verifies that the method returns zero when there is no single non-repeating number in the array. This is important for correctly handling arrays where all numbers are repeated.

Scenario 3: Test with an empty array
TestName: testNonRepeatingNumberInEmptyArray()
Description: This test will check the method's behavior when invoked with an empty array. The method should return zero.
Execution:
    Arrange: Create an empty array.
    Act: Invoke findNonRepeatingNumber with the empty array.
    Assert: Assert the result is zero.
Validation:
    The assertion verifies that the method returns zero when passed an empty array. This is crucial for validation of method's behavior with edge case scenarios.

Scenario 4: Test with an array containing only one number
TestName: testNonRepeatingNumberInArrayWithSingleNumber()
Description: The test will verify if the method is able to return single element as non-repeating number from the array containing only one number.
Execution:
    Arrange: Create an array with only one number.
    Act: Invoke findNonRepeatingNumber with the created array.
    Assert: Assert the result is the single number itself.
Validation:
    The assertion confirms that the method correctly identifies the single number as a non-repeating number. This is significant for ensuring correct processing of arrays with single elements.
"""
*/

// ********RoostGPT********

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;

public class NonRepeatingNumberFinderFindNonRepeatingNumberTest {

	@Test
	@Tag("valid")
	public void testNonRepeatingNumberInArrayWithDuplicates() {
		int[] arr = { 2, 3, 2, 4, 3, 4, 1 };
		int result = NonRepeatingNumberFinder.findNonRepeatingNumber(arr);
		assertEquals(1, result);
	}

	@Test
	@Tag("invalid")
	public void testNonRepeatingNumberInArrayWithoutNonRepeatingNumber() {
		int[] arr = { 2, 3, 2, 4, 3, 4 };
		int result = NonRepeatingNumberFinder.findNonRepeatingNumber(arr);
		assertEquals(0, result);
	}

	@Test
	@Tag("boundary")
	public void testNonRepeatingNumberInEmptyArray() {
		int[] arr = {};
		int result = NonRepeatingNumberFinder.findNonRepeatingNumber(arr);
		assertEquals(0, result);
	}

	@Test
	@Tag("boundary")
	public void testNonRepeatingNumberInArrayWithSingleNumber() {
		int[] arr = { 7 };
		int result = NonRepeatingNumberFinder.findNonRepeatingNumber(arr);
		assertEquals(7, result);
	}

}