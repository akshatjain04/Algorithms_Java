
// ********RoostGPT********
/*
Test generated by RoostGPT for test Java-test-1 using AI Type  and AI Model

ROOST_METHOD_HASH=indexOfRightMostSetBit_59025c195c
ROOST_METHOD_SIG_HASH=indexOfRightMostSetBit_05d26edc31

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/Java-test-1/4fe02726-06d9-4581-a823-6990ffcbda14/source/Algorithms_Java/src/test/java/com/thealgorithms/bitmanipulation/IndexOfRightMostSetBitTest.java
Tests:
    "@Test
@Test
void testIndexOfRightMostSetBit() {
    assertEquals(3, IndexOfRightMostSetBit.indexOfRightMostSetBit(40));
    assertEquals(-1, IndexOfRightMostSetBit.indexOfRightMostSetBit(0));
    assertEquals(3, IndexOfRightMostSetBit.indexOfRightMostSetBit(-40));
}
"Scenario 1: Testing positive integer where rightmost set bit is at zero index
Details:
TestName: testRightmostSetBitAtZeroIndex.
Description: This test is intended to check the scenario where the rightmost set bit in the binary form of a positive integer is at zero index.
Execution:
Arrange: No arrangement needed as we are directly providing the input value.
Act: Call the method indexOfRightMostSetBit with a value of 1.
Assert: We Assert that the returned value is 0 as the binary representation of 1 is "1" and the rightmost set bit is at zero index.
Validation:
This verifies the method's capacity to accurately detect the index of the rightmost set bit in the binary form of a positive integer number. It also reinforces the method's overall efficiency and correctness in normal conditions.

Scenario 2: Testing positive integer where rightmost set bit is at any index other than zero
Details:
TestName: testRightmostSetBitAtNonZeroIndex.
Description: The test is intended to validate the scenario where the rightmost set bit in the binary form of a positive integer is at an index other than zero.
Execution:
Arrange: No arrangement necessary as we are directly providing the input parameter.
Act: Invoke the method indexOfRightMostSetBit with a value of 4.
Assert: Assert that the returned value is 2, because the binary representation of 4 is "100" and the rightmost set bit is at index 2.
Validation:
This validates that the method can accurately identify the position of the rightmost set bit for the positive integer in its binary form. This will enhance the method's overall effectiveness and correctness under various conditions.

Scenario 3: Testing negative integer where rightmost set bit is at any index
Details:
TestName: testRightmostSetBitForNegativeNumber.
Description: The test examines the scenario in which the rightmost set bit in the binary form of a negative integer is at any index.
Execution:
Arrange: No setup needed as we will provide the input directly.
Act: Call the method indexOfRightMostSetBit with a value of -6.
Assert: Assert that the returned value is 1. The rightmost set bit in binary form "110" of -6 is at index 1.
Validation:
This test verifies the method's behaviour with negative numbers and its ability to correctly handle and return the index of the rightmost set bit in binary form. This allows us to test the method's edge case handling capabilities.
*/

// ********RoostGPT********

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.*;

public class IndexOfRightMostSetBitIndexOfRightMostSetBitTest {

	@Test
	@Tag("valid")
	public void testRightmostSetBitAtZeroIndex() {
		int result = IndexOfRightMostSetBit.indexOfRightMostSetBit(1);
		Assertions.assertEquals(0, result);
	}

	@Test
	@Tag("boundary")
	public void testRightmostSetBitAtNonZeroIndex() {
		int result = IndexOfRightMostSetBit.indexOfRightMostSetBit(4);
		Assertions.assertEquals(2, result);
	}

	@Test
	@Tag("integration")
	public void testRightmostSetBitForNegativeNumber() {
		int result = IndexOfRightMostSetBit.indexOfRightMostSetBit(-6);
		Assertions.assertEquals(1, result);
	}

	@Test
	@Tag("invalid")
	public void testZeroAsInput() {
		int result = IndexOfRightMostSetBit.indexOfRightMostSetBit(0);
		Assertions.assertEquals(-1, result);
	}

}