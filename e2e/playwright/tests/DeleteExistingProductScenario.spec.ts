// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type  and AI Model 

ROOST_METHOD_HASH=ffe1110278
ROOST_METHOD_SIG_HASH=5896929ed9

 ########## Scenario ########## 

{
  feature: 'Feature: Product API\r\n' +
    '    As a user of the product API\r\n' +
    '    I want to be able to perform CRUD operations on products\r\n' +
    '    So that I can manage my products effectively',
  background: 'Background:\r\n        Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: {
    title: 'Scenario: Delete an existing product',
    steps: 'Given there is an existing product with ID 1\r\n' +
      'When the client sends a DELETE request to "/api/products/1"\r\n' +
      'Then the response status code should be 200\r\n' +
      'And the product with ID 1 should no longer exist',
    examples: ''
  }
}

*/

// ********RoostGPT********
import { test, expect, APIRequestContext } from '@playwright/test';

interface TestData {
  METHOD: string;
  URL: string;
  REQ_HEADERS: string | null;
  REQ_BODY: string | null;
  RESPONSE_CODE: number;
  RESPONSE_BODY: string | null;
}

let apiContext: APIRequestContext;
let testData: TestData;

test.beforeAll(async () => {
  apiContext = await test.request.newContext();
  testData = {
    METHOD: 'DELETE',
    URL: 'http://localhost:8080/api/products/1',
    REQ_HEADERS: null,
    REQ_BODY: null,
    RESPONSE_CODE: 200,
    RESPONSE_BODY: '{}',
  };
});

test.afterAll(async () => {
  await apiContext.dispose();
});

test.describe('Product API - Delete an existing product', () => {
  test('should delete a product with ID 1 and return status 200', async () => {
    // Set up the API host
    const apiHost = 'http://localhost:8080';

    // Set up the AUTH TOKEN if required
    // const authToken = process.env.ROOST_AUTH_TOKEN; // Assuming this environment variable is set
    // apiContext.setDefaultHeaders({ Authorization: `Bearer ${authToken}` });

    // Deleting the product
    const response = await apiContext.delete(`${apiHost}/api/products/1`);

    // Verifying the response status code
    expect(response.status()).toBe(testData.RESPONSE_CODE);

    // Verifying the response body
    const responseBody = await response.json();
    expect(responseBody).toEqual(JSON.parse(testData.RESPONSE_BODY));
    
    // Verifying the product with ID 1 no longer exists
    const getProductResponse = await apiContext.get(`${apiHost}/api/products/1`);
    expect(getProductResponse.status()).toBe(404);
  });
});
